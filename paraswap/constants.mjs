export const supportedProtocols = {
  1: {
    AaveV1: "aave-v1",
    AaveV2: "aave-v2",
    AaveV3: "aave-v3",
    AugustusRFQ: "augustus-rfq",
    BalancerV1: "balancer-v1",
    BalancerV2: "balancer-v2",
    Bancor: "bancor",
    BDai: "bdai",
    BProtocol: "bprotocol",
    Compound: "compound",
    CurveV1: "curve-v1",
    CurveV1Factory: "curve-v1-factory",
    CurveV2: "curve-v2",
    DefiSwap: "defiswap",
    DODOV1: "dodo-v1",
    DODOV2: "dodo-v2",
    Fulcrum: "fulcrum",
    Hashflow: "hashflow",
    idle: "idle",
    Jarvis: "jarvis",
    KyberDmm: "kyber-dmm",
    Lido: "lido",
    LinkSwap: "linkswap",
    MakerPsm: "maker-psm",
    MaverickV1: "maverick-v1",
    mStable: "mstable",
    OneInchLP: "oneinch-lp",
    PancakeSwapV2: "pancakeswap-v2",
    PancakeswapV3: "pancakeswap-v3",
    ParaSwapLimitOrders: "paraswap-limit-orders",
    PolygonMigrator: "polygon-migrator",
    Saddle: "saddle",
    SakeSwap: "sakeswap",
    Shell: "shell",
    ShibaSwap: "shibaswap",
    Smardex: "smardex",
    Smoothy: "smoothy",
    SolidlyV2: "solidly-v2",
    SolidlyV3: "solidly-v3",
    SushiSwap: "sushiswap",
    SushiSwapV3: "sushiswap-v3",
    SwaapV2: "swaap-v2",
    Swapsicle: "swapsicle",
    Swell: "swell",
    Swerve: "swerve",
    Synapse: "synapse",
    Synthetix: "synthetix",
    TraderJoeV2_1: "traderjoe-v2.1",
    UniswapV2: "uniswap-v2",
    UniswapV3: "uniswap-v3",
    Verse: "verse",
    Weth: "weth",
    Wombat: "wombat",
    wstETH: "wsteth",
  },
  10: {
    AaveV3: "aave-v3",
    BeetsFi: "beets-fi",
    CurveV1: "curve-v1",
    CurveV1Factory: "curve-v1-factory",
    Hashflow: "hashflow",
    ParaSwapLimitOrders: "paraswap-limit-orders",
    SushiSwapV3: "sushiswap-v3",
    Swapsicle: "swapsicle",
    Synthetix: "synthetix",
    UniswapV2: "uniswap-v2",
    UniswapV3: "uniswap-v3",
    Velodrome: "velodrome",
    VelodromeV2: "velodrome-v2",
    Weth: "weth",
    Wombat: "wombat",
    WooFiV2: "woofi-v2",
    ZipSwap: "zipswap",
    ZyberSwapV3: "zyberswap-v3",
  },
  137: {
    AaveV2: "aave-v2",
    AaveV3: "aave-v3",
    ApeSwap: "apeswap",
    AugustusRFQ: "augustus-rfq",
    BalancerV2: "balancer-v2",
    ComethSwap: "comethswap",
    CurveV1: "curve-v1",
    CurveV1Factory: "curve-v1-factory",
    CurveV2: "curve-v2",
    Dfyn: "dfyn",
    DODOV2: "dodo-v2",
    Dystopia: "dystopia",
    Hashflow: "hashflow",
    IronV2: "iron-v2",
    JarvisV6: "jarvis-v6",
    JetSwap: "jetswap",
    KyberDmm: "kyber-dmm",
    mStable: "mstable",
    ParaSwapLimitOrders: "paraswap-limit-orders",
    Polycat: "polycat",
    QuickSwap: "quickswap",
    QuickSwapV3: "quickswap-v3",
    RadioShack: "radioshack",
    Retro: "retro",
    SafeSwap: "safeswap",
    Smardex: "smardex",
    SushiSwap: "sushiswap",
    SushiSwapV3: "sushiswap-v3",
    SwaapV1: "swaap-v1",
    SwaapV2: "swaap-v2",
    Swapsicle: "swapsicle",
    Synapse: "synapse",
    UniswapV2: "uniswap-v2",
    UniswapV3: "uniswap-v3",
    WaultFinance: "wault-finance",
    Wmatic: "wmatic",
    WooFiV2: "woofi-v2",
  },
  42161: {
    AaveV3: "aave-v3",
    AugustusRFQ: "augustus-rfq",
    BalancerV2: "balancer-v2",
    Camelot: "camelot",
    CamelotV3: "camelot-v3",
    Chronos: "chronos",
    ChronosV3: "chronos-v3",
    CurveV1: "curve-v1",
    CurveV1Factory: "curve-v1-factory",
    CurveV2: "curve-v2",
    DODOV1: "dodo-v1",
    DODOV2: "dodo-v2",
    GMX: "gmx",
    Hashflow: "hashflow",
    PancakeSwapV2: "pancakeswap-v2",
    PancakeswapV3: "pancakeswap-v3",
    ParaSwapLimitOrders: "paraswap-limit-orders",
    Ramses: "ramses",
    RamsesV2: "ramses-v2",
    Saddle: "saddle",
    Smardex: "smardex",
    SushiSwap: "sushiswap",
    SushiSwapV3: "sushiswap-v3",
    SwaapV2: "swaap-v2",
    Swapsicle: "swapsicle",
    Synapse: "synapse",
    TraderJoeV2: "traderjoe-v2",
    TraderJoeV2_1: "traderjoe-v2.1",
    UniswapV2: "uniswap-v2",
    UniswapV3: "uniswap-v3",
    Weth: "weth",
    Wombat: "wombat",
    WooFiV2: "woofi-v2",
    Zyberswap: "zyberswap",
    ZyberswapStable: "zyberswap-stable",
    ZyberSwapV3: "zyberswap-v3",
  },
  56: {
    AaveV3: "aave-v3",
    Acryptos: "acryptos",
    ApeSwap: "apeswap",
    AugustusRFQ: "augustus-rfq",
    BakerySwap: "bakeryswap",
    Beltfi: "beltfi",
    BiSwap: "biswap",
    CheeseSwap: "cheeseswap",
    CoinSwap: "coinswap",
    Cone: "cone",
    DODOV1: "dodo-v1",
    DODOV2: "dodo-v2",
    Ellipsis: "ellipsis",
    Hashflow: "hashflow",
    JetSwap: "jetswap",
    JulSwap: "julswap",
    KyberDmm: "kyber-dmm",
    MDEX: "mdex",
    Morphex: "morphex",
    Nerve: "nerve",
    NomiswapV2: "nomiswap-v2",
    OneInchLP: "oneinch-lp",
    PancakeSwap: "pancakeswap",
    PancakeSwapV2: "pancakeswap-v2",
    PancakeswapV3: "pancakeswap-v3",
    PantherSwap: "pantherswap",
    ParaSwapLimitOrders: "paraswap-limit-orders",
    RadioShack: "radioshack",
    Smardex: "smardex",
    Smoothy: "smoothy",
    StreetSwap: "streetswap",
    SushiSwapV3: "sushiswap-v3",
    Swapsicle: "swapsicle",
    Synapse: "synapse",
    Thena: "thena",
    ThenaFusion: "thena-fusion",
    TraderJoeV2: "traderjoe-v2",
    TraderJoeV2_1: "traderjoe-v2.1",
    UniswapV2: "uniswap-v2",
    UniswapV3: "uniswap-v3",
    Usdfi: "usdfi",
    WaultFinance: "wault-finance",
    Wbnb: "wbnb",
    Wombat: "wombat",
    WooFiV2: "woofi-v2",
  },
  8453: {
    AaveV3: "aave-v3",
    Aerodrome: "aerodrome",
    BalancerV2: "balancer-v2",
    BaseSwap: "base-swap",
    BaseswapV3: "baseswap-v3",
    Equalizer: "equalizer",
    MaverickV1: "maverick-v1",
    PancakeswapV3: "pancakeswap-v3",
    Smardex: "smardex",
    SushiSwapV3: "sushiswap-v3",
    UniswapV2: "uniswap-v2",
    UniswapV3: "uniswap-v3",
    Velocimeter: "velocimeter",
    Weth: "weth",
    Wombat: "wombat",
    WooFiV2: "woofi-v2",
  },
};

export function constructQuery(chainId, includeProtocols, excludeProtocols) {
  const allDEXS = supportedProtocols[chainId];
  let includeDEXS = [];
  let excludeDEXS = [];

  if (includeProtocols) {
    const included = includeProtocols
      .split(",")
      .map((protocol) => protocol.trim());
    includeDEXS = Object.keys(allDEXS).filter((key) =>
      included.includes(allDEXS[key])
    );
    excludeDEXS = Object.keys(allDEXS).filter(
      (key) => !includeDEXS.includes(key)
    );
  } else if (excludeProtocols) {
    const excluded = excludeProtocols
      .split(",")
      .map((protocol) => protocol.trim());
    excludeDEXS = Object.keys(allDEXS).filter((key) =>
      excluded.includes(allDEXS[key])
    );
    includeDEXS = Object.keys(allDEXS).filter(
      (key) => !excludeDEXS.includes(key)
    );
  } else {
    includeDEXS = Object.keys(allDEXS);
  }

  return {
    includeDEXS: includeDEXS.join(","),
    excludeDEXS: excludeDEXS.join(","),
  };
}
