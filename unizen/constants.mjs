export const supportedProtocols = {
  1: {
    uniswapV2: "uniswap-v2",
    sushiswap: "sushiswap",
    uniswapV3: "uniswap-v3",
    shibaswap: "shibaswap",
    elk: "elk",
    curve: "curve",
    balancer: "balancer",
    apeswap: "apeswap",
    radioshack: "radioshack",
    luaswap: "luaswap",
    frax: "frax",
    swapr: "swapr",
    pancake: "ethereum-pancakeswap-v2",
    swapsicle: "swapsicle",
    verse: "verse",
    dooar: "dooar",
    dodo: "dodo",
    synapse: "synapse",
    TraderJoe21: "traderjoe-v21",
    mav: "maverick",
    pancakev3: "pancakeswap-v3",
    hashflow: "hashflow",
    integral: "integral",
    solidlyV3: "solidly-v3",
  },
  10: {
    elk: "elk",
    uniswapV2: "uniswap-v2",
    uniswapV3: "uniswap-v3",
    curve: "curve",
    radioshack: "radioshack",
    frax: "frax",
    zipswap: "zipswap",
    swapsicle: "swapsicle",
    dodo: "dodo",
    wooFi: "woofi",
    synapse: "synapse",
    velodrome: "velodrome",
    hashflow: "hashflow",
    solidlyV3: "solidly-v3",
  },
  42161: {
    camelotv3: "camelot-v3",
    camelot: "camelot",
    elk: "elk",
    sushiswap: "sushiswap",
    sushiswapV3: "sushiswap-v3",
    uniswapV2: "uniswap-v2",
    uniswapV3: "uniswap-v3",
    curve: "curve",
    balancer: "balancer",
    frax: "frax",
    swapFish: "swapFish",
    swapr: "swapr",
    zyberswap: "zyberswap",
    arbswap: "arbswap",
    swapsicle: "swapsicle",
    oreo: "oreo",
    sharkyswap: "sharkyswap",
    lfgswap: "lfgswap",
    dodo: "dodo",
    apeswap: "apeswap",
    arbitrumExchange: "arbitrum-exchange",
    wooFi: "woofi",
    gmx: "gmx",
    spartaDex: "sparta-dex",
    synapse: "synapse",
    TraderJoe21: "traderjoe-v21",
    pancakev3: "pancakeswap-v3",
    hashflow: "hashflow",
    integral: "integral",
    solidlyV3: "solidly-v3",
  },
  8453: {
    baseSwap: "base-swap",
    synthswap: "synthswap",
    swapbased: "swap-based",
    sushiswapV3: "sushiswap-v3",
    uniswapV2: "uniswap-v2",
    uniswapV3: "uniswap-v3",
    rocketswap: "rocket-swap",
    kokonutswap: "kokonut-swap",
    alienbase: "alien-base",
    icecreamswap: "icecream-swap",
    aerodrome: "aerodrome",
    pancakev3: "pancakeswap-v3",
    mav: "maverick",
    solidlyV3: "solidly-v3",
  },
  56: {
    sushiswap: "sushiswap",
    pancake: "pancakeswap",
    biswap: "biswap",
    apeswap: "apeswap",
    mdexswap: "mdexswap",
    babyswap: "babyswap",
    nomiswap: "nomiswap",
    jetswap: "jetswap",
    elk: "elk",
    julswap: "julswap",
    complus: "complus",
    hyperjump: "hyperjump",
    radioshack: "radioshack",
    gravis: "gravis",
    babydoge: "babydoge",
    KnightSwap: "knightswap",
    frax: "frax",
    swapFish: "swapFish",
    w3swap: "w3swap",
    kyotoswap: "kyotoswap",
    swapsicle: "swapsicle",
    alitaswap: "alitaswap",
    impossibleFinance: "impossibleFinance",
    winery: "winery",
    pancakeStable: "pancakeswap-stable",
    dooar: "dooar",
    dodo: "dodo",
    ellipsis: "ellipsis", //ellipsis exchange SC address, used to fetch pools data
    wooFi: "woofi",
    uniswapV2: "uniswap-v2",
    uniswapV3: "uniswap-v3",
    synapse: "synapse",
    pancakev3: "pancakeswap-v3",
    thenaV1: "thena",
    thenaFusion: "thena-fusion",
    mav: "maverick",
    TraderJoe21: "traderjoe-v21",
    hashflow: "hashflow",
  },
  137: {
    sushiswap: "sushiswap",
    sushiswapV3: "sushiswap-v3",
    quickswap: "quickswap",
    uniswapV2: "uniswap-v2",
    uniswapV3: "uniswap-v3",
    meshswap: "meshswap",
    dfyn: "dfyn",
    jetswap: "jetswap",
    elk: "elk",
    polycat: "polycat",
    curve: "curve",
    balancer: "balancer",
    apeswap: "apeswap",
    complus: "complus",
    radioshack: "radioshack",
    cometh: "cometh",
    gravis: "gravis",
    honeyswap: "honeyswap",
    MM: "mm-finance",
    frax: "frax",
    tetu: "tetu",
    swapsicle: "swapsicle",
    wooFi: "woofi-v2",
    synapse: "synapse",
    hashflow: "hashflow",
  },
  250: {
    spookyswap: "spookyswap",
    sushiswap: "sushiswap",
    spiritswap: "spiritswap",
    morpheus: "morpheus",
    elk: "elk",
    protofi: "protofi",
    curve: "curve",
    hyperjump: "hyperjump",
    radioshack: "radioshack",
    wigoswap: "wigoswap",
    frax: "frax",
    darkKnight: "dark-knight",
    yoshiExchange: "yoshi-exchange",
    basedFinanceNextGen: "based-finance-next-gen",
    jetswap: "jetswap",
    swapsicle: "swapsicle",
    skullswap: "skullswap",
    lif3: "lif3",
    wooFi: "woofi",
    synapse: "synapse",
    solidlyV3: "solidly-v3",
  },
  43114: {
    uniswapV2: "uniswap-v2",
    uniswapV3: "uniswap-v3",
    sushiswap: "sushiswap",
    pangolin: "pangolin",
    traderjoe: "traderjoe",
    lydia: "lydia",
    baguette: "baguette",
    elk: "elk",
    hakuswap: "hakuswap",
    curve: "curve",
    complus: "complus",
    swapsicle: "swapsicle",
    radioshack: "radioshack",
    yeti: "yeti",
    partyswap: "partyswap",
    frax: "frax",
    vaporDex: "vapor-dex",
    platypus: "platypus",
    dodo: "dodo",
    wooFi: "woofi",
    gmx: "gmx",
    synapse: "synapse",
    TraderJoe21: "traderjoe-v21",
    hashflow: "hashflow",
  },
};

export function constructQuery(chainId, includeProtocols, excludeProtocols) {
  const allDEXS = supportedProtocols[chainId];
  let includeDEXS = [];
  let excludeDEXS = [];

  if (includeProtocols) {
    const included = includeProtocols
      .split(",")
      .map((protocol) => protocol.trim());
    includeDEXS = Object.keys(allDEXS).filter((key) =>
      included.includes(allDEXS[key])
    );
    excludeDEXS = Object.keys(allDEXS).filter(
      (key) => !includeDEXS.includes(key)
    );
  } else if (excludeProtocols) {
    const excluded = excludeProtocols
      .split(",")
      .map((protocol) => protocol.trim());
    excludeDEXS = Object.keys(allDEXS).filter((key) =>
      excluded.includes(allDEXS[key])
    );
    includeDEXS = Object.keys(allDEXS).filter(
      (key) => !excludeDEXS.includes(key)
    );
  } else {
    includeDEXS = Object.keys(allDEXS);
  }

  return {
    includeDEXS: { [chainId]: includeDEXS },
    excludeDEXS: { [chainId]: excludeDEXS },
  };
}

export const BASE_DOMAIN = "https://api.zcx.com/trade/v1";
